package com.scb.axessspringboottraining.controller;

import com.scb.axessspringboottraining.dao.Adminlogindata;
import com.scb.axessspringboottraining.dao.UserRepository;
import com.scb.axessspringboottraining.entities.AdminLogin;
import com.scb.axessspringboottraining.service.AdminProfileService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/admin/profile")
@CrossOrigin("*") // React frontend
public class AdminProfileController {

    @Autowired
    private AdminProfileService adminProfileService;
    @Autowired
    private Adminlogindata adminRepository;
    @Autowired
    private UserRepository userrepository;

    // ✅ Get admin profile by email
    @GetMapping("/{email}")
    public ResponseEntity<AdminLogin> getProfile(@PathVariable String email) {
        System.out.println("Fetching profile for email: " + email);
        return ResponseEntity.ok(adminProfileService.getAdminProfile(email));
    }

    // ✅ Update admin profile
    @PutMapping("/{email}")
    public ResponseEntity<AdminLogin> updateProfile(
            @PathVariable String email,
            @RequestBody AdminLogin updatedProfile) {

        System.out.println("Updating profile for email: " + email);
        System.out.println("New details: " + updatedProfile);

        return ResponseEntity.ok(adminProfileService.updateAdminProfile(email, updatedProfile));

    }
    @GetMapping("/count")
    public long getUserCount() {
        return adminRepository.count();
    }
    @GetMapping("/depcount")
    public long getdepcount(){
        return adminRepository.count();
    }

}



package com.scb.axessspringboottraining.service;

import com.scb.axessspringboottraining.entities.AdminLogin;

public interface AdminProfileService {
    AdminLogin getAdminProfile(String email);
    AdminLogin updateAdminProfile(String email, AdminLogin updatedProfile);
    Integer getUserCount();
    Integer getEmptyDepartmentCount();

}



package com.scb.axessspringboottraining.service;

import com.scb.axessspringboottraining.dao.Adminlogindata;
import com.scb.axessspringboottraining.dao.UserRepository;
import com.scb.axessspringboottraining.entities.AdminLogin;
import com.scb.axessspringboottraining.entities.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class AdminProfileServiceimp implements AdminProfileService {

    @Autowired
    private Adminlogindata adminlogindata;
    @Autowired
    private UserRepository userrepository;

    @Override
    public AdminLogin getAdminProfile(String email) {
        Optional<AdminLogin> userOpt = adminlogindata.findById(email);
        if (userOpt.isPresent()) {
            return userOpt.get();
        }
        throw new RuntimeException("User not found with email: " + email);
    }

    @Override
    public AdminLogin updateAdminProfile(String email, AdminLogin updatedProfile) {
        return adminlogindata.findById(email)
                .map(existingProfile -> {
                    existingProfile.setFirstname(updatedProfile.getFirstname());
                    existingProfile.setLastname(updatedProfile.getLastname());
                    existingProfile.setPassword(updatedProfile.getPassword());
                    return adminlogindata.save(existingProfile); // Save to DB
                })
                .orElseThrow(() -> new RuntimeException("User not found with email: " + email));
    }
    @Autowired
    private JdbcTemplate jdbcTemplate;




    @Override
    public Integer getUserCount() { String sql = "SELECT COUNT(*) FROM AdminLogin";
        return jdbcTemplate.queryForObject(sql, Integer.class);

    }
    @Autowired
    private JdbcTemplate jdbcTemplates;

    @Override
    public Integer getEmptyDepartmentCount() {
        String sql="SELECT COUNT(*) FROM User WHERE department=''";
        return jdbcTemplates.queryForObject(sql, Integer.class);

    }
}





package com.scb.axessspringboottraining.entities;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import java.util.Arrays;

@Entity
@Table(name="user_logindata")
public class User {

    @Id
    @Column(nullable = false,unique = true)
    private String email;

    private String firstname;
    private String lastname;
    private String accounttype;
    private String password;

    private String department="";
    @Column(name = "bookmarks", columnDefinition = "text[]")
    private String[] bookmarks;
    @Column(name = "recent_files" , columnDefinition = "text[]")
    private String[] recentFiles;

    public User(){}

    public User(String email, String firstname, String lastname, String accounttype, String password, String department, String[] bookmarks, String[] recentFiles) {
        this.email = email;
        this.firstname = firstname;
        this.lastname = lastname;
        this.accounttype = accounttype;
        this.password = password;
        this.department = department;
        this.bookmarks = bookmarks;
        this.recentFiles = recentFiles;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public String getAccounttype() {
        return accounttype;
    }

    public void setAccounttype(String accounttype) {
        this.accounttype = accounttype;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public String[] getBookmarks() {
        return bookmarks;
    }

    public void setBookmarks(String[] bookmarks) {
        this.bookmarks = bookmarks;
    }

    public String[] getRecentFiles() {
        return recentFiles;
    }

    public void setRecentFiles(String[] recentFiles) {
        this.recentFiles = recentFiles;
    }

    @Override
    public String toString() {
        return "User{" +
                "email='" + email + '\'' +
                ", firstname='" + firstname + '\'' +
                ", lastname='" + lastname + '\'' +
                ", accounttype='" + accounttype + '\'' +
                ", password='" + password + '\'' +
                ", department='" + department + '\'' +
                ", bookmarks=" + Arrays.toString(bookmarks) +
                ", recentFiles=" + Arrays.toString(recentFiles) +
                '}';
    }
}
