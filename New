@RestController
@RequestMapping("/api/admin")
public class AdminController {

    @Autowired
    private AdminRepository adminRepository;

    // Get profile by email
    @GetMapping("/profile/{email}")
    public ResponseEntity<AdminLoginData> getProfile(@PathVariable String email) {
        return adminRepository.findById(email)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // Update profile
    @PutMapping("/profile/{email}")
    public ResponseEntity<AdminLoginData> updateProfile(
            @PathVariable String email,
            @RequestBody AdminLoginData updatedAdmin) {

        return adminRepository.findById(email).map(admin -> {
            admin.setFirstname(updatedAdmin.getFirstname());
            admin.setLastname(updatedAdmin.getLastname());
            if (updatedAdmin.getPassword() != null && !updatedAdmin.getPassword().isEmpty()) {
                admin.setPassword(updatedAdmin.getPassword());
            }
            return ResponseEntity.ok(adminRepository.save(admin));
        }).orElse(ResponseEntity.notFound().build());
    }
}





import React, { useEffect, useState } from "react";
import axios from "axios";
import "./AdminSettingsUI.css";
import logo from "../../Assests/sclogoshiva.png";
import { Link } from "react-router-dom";

export default function AdminSettingsUI() {
    const [profile, setProfile] = useState({
        firstname: "",
        lastname: "",
        email: "",
        password: "",
        newPassword: "",
        confirmPassword: ""
    });

    const [message, setMessage] = useState("");

    useEffect(() => {
        // get email from localStorage after login
        const user = JSON.parse(localStorage.getItem("user"));
        if (user?.email) {
            axios.get(`http://localhost:8080/api/admin/profile/${user.email}`)
                .then(res => setProfile({ ...profile, ...res.data }))
                .catch(err => console.error("Error fetching profile:", err));
        }
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setProfile({ ...profile, [name]: value });
    };

    const handleSave = async () => {
        if (profile.newPassword !== profile.confirmPassword) {
            setMessage("New passwords do not match");
            return;
        }

        try {
            const res = await axios.put(
                `http://localhost:8080/api/admin/profile/${profile.email}`,
                {
                    firstname: profile.firstname,
                    lastname: profile.lastname,
                    password: profile.newPassword || profile.password
                }
            );

            setMessage("Profile updated successfully!");
            setProfile({ ...profile, ...res.data, newPassword: "", confirmPassword: "" });
        } catch (err) {
            console.error("Update error:", err);
            setMessage("Failed to update profile");
        }
    };

    return (
        <div className="settings-container">
            {/* Sidebar & Header omitted for brevity */}

            <main className="main-content">
                <div className="card">
                    <h2>Profile Settings</h2>
                    <div className="form-grid">
                        <input
                            type="text"
                            name="firstname"
                            value={profile.firstname}
                            onChange={handleChange}
                            placeholder="First Name"
                        />
                        <input
                            type="text"
                            name="lastname"
                            value={profile.lastname}
                            onChange={handleChange}
                            placeholder="Last Name"
                        />
                        <input
                            type="email"
                            name="email"
                            value={profile.email}
                            readOnly
                            className="readonly-input"
                        />
                    </div>

                    <h3>Change Password</h3>
                    <div className="form-grid">
                        <input
                            type="password"
                            name="newPassword"
                            value={profile.newPassword}
                            onChange={handleChange}
                            placeholder="New Password"
                        />
                        <input
                            type="password"
                            name="confirmPassword"
                            value={profile.confirmPassword}
                            onChange={handleChange}
                            placeholder="Confirm New Password"
                        />
                    </div>

                    <div className="form-actions">
                        <button className="btn-primary" onClick={handleSave}>
                            Save Changes
                        </button>
                    </div>

                    {message && <p className="status-msg">{message}</p>}
                </div>
            </main>
        </div>
    );
}
