package com.scb.axessspringboottraining.service;

import com.scb.axessspringboottraining.entities.AdminLogin;
import com.scb.axessspringboottraining.dao.Adminlogindata;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class AdminQueryService {

    private final Adminlogindata repo;

    public AdminQueryService(Adminlogindata repo) {
        this.repo = repo;
    }

    // Return all admin rows as a List
    public List<AdminLogin> getAllAdmins() {
        List<AdminLogin> list = new ArrayList<>();
        repo.findAll().forEach(list::add);
        return list;
    }

    // Return single admin by email (email is the repository key type in your project)
    public AdminLogin getAdminByEmail(String email) {
        return repo.findById(email).orElse(null);
    }
}






package com.scb.axessspringboottraining.controller;

import com.scb.axessspringboottraining.entities.AdminLogin;
import com.scb.axessspringboottraining.service.AdminQueryService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/admins")
@CrossOrigin(origins = "*") // Postman doesn't need this, but it's harmless for testing from browser/front-end later
public class AdminQueryController {

    private final AdminQueryService service;

    public AdminQueryController(AdminQueryService service) {
        this.service = service;
    }

    // GET all admins
    @GetMapping
    public ResponseEntity<List<AdminLogin>> getAllAdmins() {
        List<AdminLogin> admins = service.getAllAdmins();
        return ResponseEntity.ok(admins);
    }

    // GET by email using query param (safe for emails with @)
    // Usage: GET /api/admins/by-email?email=admin@company.com
    @GetMapping("/by-email")
    public ResponseEntity<AdminLogin> getAdminByEmail(@RequestParam String email) {
        AdminLogin admin = service.getAdminByEmail(email);
        if (admin == null) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(admin);
    }

    // Optional: GET by path variable (works if you URL-encode '@' as %40)
    // Usage: GET /api/admins/admin%40company.com
    @GetMapping("/{email}")
    public ResponseEntity<AdminLogin> getAdminByEmailPath(@PathVariable String email) {
        AdminLogin admin = service.getAdminByEmail(email);
        if (admin == null) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(admin);
    }
}
