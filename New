package com.scb.axessspringboottraining.controller;

import com.scb.axessspringboottraining.entities.AdminLogin;
import com.scb.axessspringboottraining.dao.Adminlogindata;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@CrossOrigin(origins = "http://localhost:3000") // Allow React frontend
@RestController
@RequestMapping("/api/admin/profile")
public class AdminProfileController {

    @Autowired
    private Adminlogindata adminRepository;

    @GetMapping("/{email}")
    public ResponseEntity<?> getProfile(@PathVariable String email) {
        Optional<AdminLogin> adminOpt = adminRepository.findById(email);
        if (adminOpt.isPresent()) {
            AdminLogin admin = adminOpt.get();

            // Make sure no null fields break frontend
            if (admin.getStatus() == null) admin.setStatus("Active");
            if (admin.getRecentactivity() == null) admin.setRecentactivity("No activity yet");

            return ResponseEntity.ok(admin);
        } else {
            return ResponseEntity.status(404).body("Admin not found");
        }
    }

    @PutMapping("/{email}")
    public ResponseEntity<?> updateProfile(
            @PathVariable String email,
            @RequestBody AdminLogin updatedProfile) {

        return adminRepository.findById(email)
                .map(existingProfile -> {
                    existingProfile.setFirstname(updatedProfile.getFirstname());
                    existingProfile.setLastname(updatedProfile.getLastname());
                    existingProfile.setPassword(updatedProfile.getPassword());
                    existingProfile.setAccounttype(updatedProfile.getAccounttype());
                    // Keep status and recent activity unchanged or optional
                    return ResponseEntity.ok(adminRepository.save(existingProfile));
                })
                .orElse(ResponseEntity.status(404).body("Admin not found"));
    }
}






import React, { useEffect, useState } from "react";

export default function AdminSettings() {
  const storedUser = JSON.parse(localStorage.getItem("user"));
  const email = storedUser?.email;

  const [formData, setFormData] = useState({
    firstname: "",
    lastname: "",
    email: email || "",
    password: "",
    accounttype: "Admin",
    status: "",
    recentactivity: ""
  });

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!email) return;

    fetch(`http://localhost:8080/api/admin/profile/${email}`)
      .then((res) => res.json())
      .then((data) => {
        setFormData({
          firstname: data.firstname,
          lastname: data.lastname,
          email: data.email,
          password: "",
          accounttype: data.accounttype,
          status: data.status || "Active",
          recentactivity: data.recentactivity || "No recent activity"
        });
        setLoading(false);
      })
      .catch((err) => {
        console.error("Error fetching profile:", err);
        setLoading(false);
      });
  }, [email]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(
        `http://localhost:8080/api/admin/profile/${email}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formData),
        }
      );

      if (response.ok) {
        alert("Settings updated successfully!");
      } else {
        alert("Error updating settings");
      }
    } catch (error) {
      console.error("Error:", error);
      alert("Server error");
    }
  };

  if (loading) return <p>Loading profile...</p>;

  return (
    <div className="settings-container">
      <h2>Admin Settings</h2>
      <form onSubmit={handleSubmit} className="settings-form">
        <label>First Name</label>
        <input
          type="text"
          name="firstname"
          value={formData.firstname}
          onChange={handleChange}
        />

        <label>Last Name</label>
        <input
          type="text"
          name="lastname"
          value={formData.lastname}
          onChange={handleChange}
        />

        <label>Email</label>
        <input type="text" name="email" value={formData.email} disabled />

        <label>Password</label>
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
        />

        <label>Status</label>
        <input type="text" name="status" value={formData.status} disabled />

        <label>Recent Activity</label>
        <input
          type="text"
          name="recentactivity"
          value={formData.recentactivity}
          disabled
        />

        <button type="submit" className="save-btn">
          Save Changes
        </button>
      </form>
    </div>
  );
}
