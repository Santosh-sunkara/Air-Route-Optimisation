public interface UserRepository extends JpaRepository<User, Long> {

    // Count users with empty department
    long countByDepartment(String department);

    // OR (if department may be NULL as well as empty)
    @Query("SELECT COUNT(u) FROM User u WHERE u.department IS NULL OR u.department = ''")
    long countUsersWithEmptyDepartment();
}


@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    public long getUsersWithEmptyDepartment() {
        return userRepository.countUsersWithEmptyDepartment();
    }
}


@RestController
@RequestMapping("/api/users")
@CrossOrigin("*")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/empty-dept-count")
    public long getEmptyDepartmentUsers() {
        return userService.getUsersWithEmptyDepartment();
    }
}



useEffect(() => {
  axios.get("http://localhost:8080/api/users/empty-dept-count")
    .then(res => {
      console.log("Users with empty department:", res.data);
      setEmptyDeptCount(res.data);
    })
    .catch(err => console.error(err));
}, []);


<p>Users with Empty Department: {emptyDeptCount}</p>
