package com.scb.axessspringboottraining.controller;

import com.scb.axessspringboottraining.dao.Adminlogindata;
import com.scb.axessspringboottraining.dao.UserRepository;
import com.scb.axessspringboottraining.entities.AdminLogin;
import com.scb.axessspringboottraining.service.AdminProfileService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/admin/profile")
@CrossOrigin("*") // React frontend
public class AdminProfileController {

    @Autowired
    private AdminProfileService adminProfileService;
    @Autowired
    private Adminlogindata adminRepository;
    @Autowired
    private UserRepository userrepository;

    // ✅ Get admin profile by email
    @GetMapping("/{email}")
    public ResponseEntity<AdminLogin> getProfile(@PathVariable String email) {
        System.out.println("Fetching profile for email: " + email);
        return ResponseEntity.ok(adminProfileService.getAdminProfile(email));
    }

    // ✅ Update admin profile
    @PutMapping("/{email}")
    public ResponseEntity<AdminLogin> updateProfile(
            @PathVariable String email,
            @RequestBody AdminLogin updatedProfile) {

        System.out.println("Updating profile for email: " + email);
        System.out.println("New details: " + updatedProfile);

        return ResponseEntity.ok(adminProfileService.updateAdminProfile(email, updatedProfile));
    }

    // ✅ Active users (count of admins)
    @GetMapping("/count")
    public Integer getUserCount() {
        return adminProfileService.getUserCount();
    }

    // ✅ Pending requests (users with empty department)
    @GetMapping("/departmentcount")
    public Integer getEmptyDepartmentCount() {
        return adminProfileService.getEmptyDepartmentCount();
    }
}






package com.scb.axessspringboottraining.service;

import com.scb.axessspringboottraining.dao.Adminlogindata;
import com.scb.axessspringboottraining.dao.UserRepository;
import com.scb.axessspringboottraining.entities.AdminLogin;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class AdminProfileServiceimp implements AdminProfileService {

    @Autowired
    private Adminlogindata adminlogindata;
    @Autowired
    private UserRepository userrepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    public AdminLogin getAdminProfile(String email) {
        Optional<AdminLogin> userOpt = adminlogindata.findById(email);
        if (userOpt.isPresent()) {
            return userOpt.get();
        }
        throw new RuntimeException("User not found with email: " + email);
    }

    @Override
    public AdminLogin updateAdminProfile(String email, AdminLogin updatedProfile) {
        return adminlogindata.findById(email)
                .map(existingProfile -> {
                    existingProfile.setFirstname(updatedProfile.getFirstname());
                    existingProfile.setLastname(updatedProfile.getLastname());
                    existingProfile.setPassword(updatedProfile.getPassword());
                    return adminlogindata.save(existingProfile); // Save to DB
                })
                .orElseThrow(() -> new RuntimeException("User not found with email: " + email));
    }

    // ✅ Active users (count of admins)
    @Override
    public Integer getUserCount() {
        String sql = "SELECT COUNT(*) FROM admin_login"; // <-- your table name for AdminLogin
        return jdbcTemplate.queryForObject(sql, Integer.class);
    }

    // ✅ Pending requests (users with empty department)
    @Override
    public Integer getEmptyDepartmentCount() {
        String sql = "SELECT COUNT(*) FROM user_logindata WHERE department = ''";
        return jdbcTemplate.queryForObject(sql, Integer.class);
    }
}

